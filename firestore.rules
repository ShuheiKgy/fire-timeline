function isProfile(resource) {
  return resource.keys().hasOnly(['name', 'photoURL']) &&
    (!('name' in resource.keys()) || (resource.name is string && resource.name.size() <= 50)) &&
    (!('photoURL' in resource.keys()) || (resource.photoURL is string && resource.photoURL.matches("^https:[/][/].*")));
}

function isPost(resource) {
  return resource.keys().hasOnly(['uid', 'text', 'created']) && 
    resource.keys().hasAll(['uid', 'created']) &&
    resource.uid is string &&
    (!('text' in resource.keys()) || 
      (resource.text is string && 
        resource.text.size() <= 140)) &&
    resource.created is timestamp;
}

service cloud.firestore {
  match /databases/{database}/documents {
    function isEnabledUser(uid) {
      return exists(/databases/$(database)/documents/users/$(uid))
    }

    match /users/{userId} {
      allow get: if request.auth.uid != null;
      allow write: if isProfile(request.resource.data) && 
        request.auth.uid == userId;

      match /timeline/{postId} {
        allow read: if request.auth.uid == userId || userId == resource.data.uid;
        allow create: if isPost(request.resource.data) &&
          request.auth.uid == request.resource.data.uid &&
          request.time == request.resource.data.created &&
          request.auth.uid == userId;
        allow delete: if request.auth.uid == userId;
      }

      match /following/{uid} {
        allow read: if request.auth.uid != null;
        allow create: if request.time == request.resource.data.created &&
          isEnabledUser(uid) &&
          request.auth.uid == userId;
        allow delete: if request.auth.uid == userId;
      }

      match /followers/{uid} {
        allow read: if request.auth.uid != null;
        allow create: if request.time == request.resource.data.created &&
          isEnabledUser(userId) &&
          request.auth.uid == uid;
        allow delete: if request.auth.uid == uid;
      }
    }
  }
}